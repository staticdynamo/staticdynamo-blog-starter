{% comment -%}---------------------------------------------------------------------------
Function: render_content

Description: Parses and renders the shortcodes in the given Html content.

Usage: {% include dynamo function="render_content" content=content -%}

Parameters:
    * content       (string) - the HTML of compiled markdown generated by Jekyll

Output: The new Html content after parsing the shortcodes
------------------------------------------------------------------------{% endcomment -%}

{% if include.params.content -%}
    {% assign content_result = include.params.content -%}
    {% for shortcode_hash in site.shortcodes -%}
        {% assign shortcode_name = shortcode_hash[0] -%}
        {% assign shortcode = shortcode_hash[1] -%}
        {% unless shortcode.enabled -%}
            {% continue -%}
        {% endunless -%}

        {% comment -%}
        Scenario 1. Parse shortcode with content but without attributes.  
        For example, <note>HelloWorld</note>
        {% endcomment -%}
        {% capture shortcode_content_start -%}<{{ shortcode_name }}>{%- endcapture -%}
        {% capture shortcode_content_end -%}</{{ shortcode_name }}>{%- endcapture -%}
        {% assign parts = content_result | split: shortcode_content_start -%}
        {% for part in parts | offset: 1 -%}
            {% if part contains shortcode_content_end -%}
                {% assign workspace = part | split: shortcode_content_end -%}
                {% assign shortcode_content = workspace[0] -%}
                {% capture shortcode_source -%}
                    {{ shortcode_content_start }}{{ shortcode_content }}{{ shortcode_content_end }}
                {%- endcapture -%}

                {% assign STACK = STACK | push: shortcode_source | push: content_result -%}
                {% capture shortcode_result -%}
                    {% include dynamo function="load_plugin" plugin=shortcode_name category="shortcodes" content=shortcode_content %}
                {%- endcapture -%}
                {% assign content_result = STACK | last -%}
                {% assign STACK = STACK | pop -%}
                {% assign shortcode_source = STACK | last -%}
                {% assign STACK = STACK | pop -%}

                {% assign content_result = content_result | replace: shortcode_source, shortcode_result -%}
            {% endif -%}
        {% endfor -%}

        {% comment -%}
        Scenario 2. Parse shortcode with content and with attributes.  
        For example, <note style="warning">HelloWorld</note>
        {% endcomment -%}
        {% capture shortcode_start -%}<{{ shortcode_name }} {%- endcapture -%}
        {% capture shortcode_atts_end -%}>{%- endcapture -%}
        {% capture shortcode_content_end -%}</{{ shortcode_name }}>{%- endcapture -%}
        {% assign parts = content_result | split: shortcode_start -%}
        {% for part in parts | offset: 1 -%}
            {% if part contains shortcode_content_end -%}
                {% assign workspace = part | split: shortcode_content_end -%}
                {% assign shortcode_inner = workspace[0] -%}
                {% assign workspace = shortcode_inner | split: shortcode_atts_end -%}
                {% assign shortcode_atts = workspace[0] -%}
                {% assign workspace = shortcode_atts | append: shortcode_atts_end -%}
                {% assign shortcode_content = shortcode_inner | replace: workspace, '' -%}
                {% capture shortcode_source -%}
                    {{ shortcode_start }}{{ shortcode_inner }}{{ shortcode_content_end }}
                {%- endcapture -%}

                {% assign STACK = STACK | push: shortcode_source | push: content_result -%}
                {% capture shortcode_result -%}
                    {% include dynamo function="load_plugin" plugin=shortcode_name category="shortcodes" attributes=shortcode_atts content=shortcode_content %}
                {%- endcapture -%}
                {% assign content_result = STACK | last -%}
                {% assign STACK = STACK | pop -%}
                {% assign shortcode_source = STACK | last -%}
                {% assign STACK = STACK | pop -%}

                {% assign content_result = content_result | replace: shortcode_source, shortcode_result -%}
            {% endif -%}
        {% endfor -%}

        {% comment -%}
        Scenario 3. Parse shortcode without content.  
        For example, <warning />, <youtube src="https://www.youtube.com/watch?v=w3jLJU7DT5E" />
        {% endcomment -%}
        {% capture shortcode_start -%}<{{ shortcode_name }} {%- endcapture -%}
        {% capture shortcode_end -%}/>{%- endcapture -%}
        {% assign parts = content_result | split: shortcode_start -%}
        {% for part in parts | offset: 1 -%}
            {% if part contains shortcode_end -%}
                {% assign workspace = part | split: shortcode_end -%}
                {% assign shortcode_atts = workspace[0] -%}
                {% capture shortcode_source -%}
                    {{ shortcode_start }}{{ shortcode_atts }}{{ shortcode_end }}
                {%- endcapture -%}

                {% assign STACK = STACK | push: shortcode_source | push: content_result -%}
                {% capture shortcode_result -%}
                    {% include dynamo function="load_plugin" plugin=shortcode_name category="shortcodes" attributes=shortcode_atts %}
                {%- endcapture -%}
                {% assign content_result = STACK | last -%}
                {% assign STACK = STACK | pop -%}
                {% assign shortcode_source = STACK | last -%}
                {% assign STACK = STACK | pop -%}

                {% assign content_result = content_result | replace: shortcode_source, shortcode_result -%}
            {% endif -%}
        {% endfor -%}
    {% endfor -%}

    {{ content_result }}
{%- endif -%}